%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPEC                                                                     
% Copyright (C) 2011-2017 Alwen Tiu, Ross Horne
%
% This program is free software; you can redistribute it and/or modify     
% it under the terms of the GNU General Public License as published by     
% the Free Software Foundation; either version 2 of the License, or        
% (at your option) any later version.                                      
%
% This program is distributed in the hope that it will be useful,          
% but WITHOUT ANY WARRANTY; without even the implied warranty of           
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
% GNU General Public License for more details.                             
%
% You should have received a copy of the GNU General Public License        
% along with this code; if not, write to the Free Software Foundation,     
% Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Module for checking bi-trace consistency. This implements the
% decision procedure described in 
% [TD10] Alwen Tiu and Jeremy Dawson. "Automating Open Bisimulation Checking for the Spi-Calculus".
% In Proceedings of the 23rd IEEE Computer Security Foundations Symposium, pp. 307 - 321, 2010. 


#include "basic.def".
#include "uni.def".
#include "obsthy.def".
#include "constraint-system2.def".

% Input/output pairs:
% in : term -> term -> bt_pair
% out : term -> term -> bt_pair




% Begin Nam fun.
Define fun_Nam : list tm -> list constraint_pair -> return_form -> prop
by
fun_Nam Vs Cs Return_Val :=
  flex_subst Vs FSub /\
  id_subst Vs IdSubst /\
  cs_apply_list_pair 2 FSub Cs CsI /\
  cs_solve_pair Vs nil CsI IdSubst LSubstOut nil nil SolvedForm /\
  concretize FSub /\
  _abstract (solved_form_and_substitution SolvedForm LSubstOut FSub) var_abs_return_form Return_Val1 /\ 
  solved_form_apply_var Return_Val1 Return_Val .
%----------- END Nam fun ----------------


Define apply_RC : list tm -> list thy_pair -> list constraint_pair ->
                  list tm -> list thy_pair -> list constraint_pair -> prop
by 

% Symmetric encryption.
apply_RC Vars_in Thy_in Cs_in Vars_in Thy_out Cs_out := 
  (select Thy_in (mp (en M N) (en R T)) Rest \/
   select Thy_in (mp (blind M N) (blind R T)) Rest) /\ 
  %split_thy Rest S1 S2 /\ 
  %C1 = (dedl S1 N) /\
  %C2 = (dedl S2 T) /\ 
  append Cs_in (cons (dedc_pair Rest (mp N T)) nil) Cs_in1 /\ % Cases where no unifier is required are processes already by reducing the theory.
  (fun_Nam Vars_in Cs_in1 (solved_form_and_substitution Cs_out Sol Sub2)) /\ 
  compose OriVars Sub Sol Sub1 /\ 
  apply_thy_both Sub1 Sub2 Thy Thy2 ; 
                             %  (nam_fun_2 Vars_in Thy_in Cs_in1 Vs_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out)) ;   !!! Needed, for bisim, but ommitted temporarily for sim
  %apply_subst_bt Sub1 Sub2 H_in H_out /\ % not needed since performed in nam_fun.
  %apply_subst_thy  Sub1 Sub2 Thy_in Thy /\ % not needed since performed in nam_fun.
  %reduce Thy Thy_out; % performed at top of bt_cst_aux.

% Asymmetric Encryption
apply_RC Vars_in Thy_in Cs_in Vars_in Thy_out Cs_out := 
  select Thy_in (mp (aen M (pub N)) (aen R (pub T)))  Rest /\ 
  %split_thy Rest S1 S2 /\ 
  %C1 = (dedl S1 N) /\
  %C2 = (dedl S2 T) /\ 
  append Cs_in (cons (dedc_pair Rest (mp N T)) nil) Cs_in1 /\ 
  (fun_Nam Vars_in Cs_in1 (solved_form_and_substitution Cs_out Sol Sub2)) /\ 
              % (nam_fun_2 Vars_in Thy_in Cs_in1 Vs_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out)) ;  Reverse direction required for bisim.
  compose Vars_in Sub Sol Sub1 /\ 
  apply_thy_both Sub1 Sub2 Thy Thy_out ;
%  (fun_RC1 H_in C1 Sub1 Sub2 \/ fun_RC2 H_in C2 Sub1 Sub2) /\
%  apply_subst_bt Sub1 Sub2 H_in H_out /\
%  apply_subst_thy  Sub1 Sub2 Thy_in Thy /\
%  reduce Thy Thy_out;

% Special case for aenc and variables.
% This seems to be redundant since \Gamma |- (var x) <-> (var x) always, hence (aen M (var X)) <-> (aen R (var X)) --reduce--> M <-> R !!!!!!!!!!!!!!!!!!!!!!
% To fix this decom_enc_aenc in obsthy.def should be defined as follows. The current implementation is baffling!!
%  decom_enc_aenc (cons (mp (aen U V) (aen R T)) Thy) NE1 E1 NE2 E2 :=
%    append NE1 E1 Thy1 /\ 
%    append Thy1 Thy Thy2 /\
%    _if (V = pub K /\ T = pub M /\ deduce_r Thy2 U R /\ deduce_r Thy2 V T)
%	(
%	    decom_enc_aenc Thy NE1 E1 NE2 E2
%	)
%	(
%	    _if (deduce_r Thy2 V T)
%		(
%		    decom_pair (cons (mp U R) Thy) NewThy /\ 
%		    decom_enc_aenc NewThy NE1 E1 NE2 E2
%		)
%		(
%		    insert (mp (aen U V) (aen R T)) E1 NewE1 /\ 
%		    decom_enc_aenc Thy NE1 NewE1 NE2 E2
%		)
%	) ;
% Possibly the consistency condition should also be updated.
%Define thy_cc4 : list thy_pair -> prop
%by
%thy_cc4 Thy :=
%  split_thy Thy S1 S2 /\ 
%  forall M1 N1 M2 N2, member (mp (aen M1 (pub N1)) (aen M2 (pub N2))) Thy 
%      -> (ded1_r S1 N1 -> false) /\ (ded1_r S2 N2 -> false) /\ (ded1_r S1 M1 /\ ded1_r S1 pub(N1) -> false) /\ (ded1_r S1 M1 /\ ded1_r S1 pub(N1) -> false). 
% Not so sure this is necessary though.
apply_RC Vars_in Thy_in Cs_in Vars_out Thy_out Cs_out := 
  select Thy_in (mp (aen M (var X)) (aen R (var X))) Rest /\
  Subst = (cons (sub (var X) (pub (var X))) nil) /\
  cs_apply_list_pair_both Subst Subst Cs_in Cs_out /\
  apply_thy_both Subst Subst Thy_in Thy_out /\
  apply_RC Vars_in Thy_in Cs_in Vars_out Thy_out Cs_out;

apply_RC Vars_in Thy_in Cs_in Vars_out Thy_out Cs_out := 
  select Thy_in (mp (blind M N) (blind R T)) Rest /\ 
  append Cs_in (cons (dedc_pair Rest (mp N T)) nil) Cs_in1 /\ 
  (fun_Nam Vars_in Cs_in1 (solved_form_and_substitution Cs_out Sol Sub2)) /\
  compose Vars_in Sub Sol Sub1 /\ 
  apply_thy_both Sub1 Sub2 Thy Thy_out
  .
%((nam_fun_1 Vars_in Thy_in Cs_in1 Vs_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out) \/ 
 %  (nam_fun_2 Vars_in Thy_in Cs_in1 Vs_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out)) .








Define apply_RS_nd : list tm -> list thy_pair -> list constraint_pair ->
                  list tm -> list thy_pair -> list constraint_pair -> prop
by 
apply_RS_nd Vars_in Thy_in Cs_in Vars_out Thy_out Cs_out :=
  %bitrace_vars H_in Vars /\
  select Thy_in (mp M1 M2) Rest1 /\
  select Rest1 (mp N1 N2) Rest2 /\ 
  (
   (unify nil M1 N1 Vars_in Subst /\ 
    (fun_Nam Vars_in Cs_in1 (solved_form_and_substitution Cs_out Sol Sub2)) /\
     compose Vars_in Sub Sol Sub1 /\ 
     apply_thy_both Sub1 Sub2 Thy Thy_out  %nam_fun_RS1 Vars_in Thy_in Cs_in Subst Sol Vars_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out
   ) 
  % \/ (unify nil M2 N2 Vars_in Subst /\ nam_fun_RS2 Vars_in Thy_in Cs_in Subst Sol Vars_out Thy_out Cs_out Sub1 Sub2 /\ is_solved Cs_out)  %%!!! The other direction is needed for bisimulation!!!
  ) .
  %apply_subst_bt Sub1 Sub2 H_in H_out /\
  %apply_subst_thy Sub1 Sub2 Thy_in Thy /\
  %reduce Thy_out Thy_out1. % Reduce performed at beginning of bt_cst_aux.


% [bt_cst_aux] This exhausts all possible rewrites of a
% bi-trace- and-theory configuration. Tabled for efficiency. 

Define inductive bt_cst_aux_nd : list tm -> list thy_pair -> list constraint_pair -> prop
by 
bt_cst_aux_nd Vs Thy0 Cs :=
  reduce Thy0 Thy /\
  thy_red_consistent Thy /\ 
  (forall Vs1 Thy1 Cs1, apply_RC Vs Thy Cs Vs1 Thy1 Cs1 -> bt_cst_aux_nd Vs1 Thy1 Cs1) /\ 
  (forall Vs1 Thy1 Cs1, apply_RS_nd Vs Thy Cs Vs1 Thy1 Cs1 -> bt_cst_aux_nd Vs1 Thy1 Cs1).


%Define bt_consistent_iter : list bt_pair -> list thy_pair -> list bt_pair -> prop 
%by   % Checks that, for every substitution theta respecting Cs, Thy theta is a consistent theory.
%bt_consistent_iter Bt_Pre Thy_Pre nil ;
%bt_consistent_iter Bt_Pre Thy_Pre (cons (in M N) H) :=
%  deduce_r Thy_Pre M N /\  % This is part of a "solved form" check.
%  append Bt_Pre (cons (in M N) nil) NewBt /\ 
%  bt_consistent_iter NewBt Thy_Pre H ;  
%bt_consistent_iter Bt_Pre Thy_Pre (cons (out M N) H) :=
%  reduce (cons (mp M N) Thy_Pre) NewThy /\ 
%  bt_cst_aux Bt_Pre NewThy /\
%  append Bt_Pre (cons (out M N) nil) NewBt /\ 
%  bt_consistent_iter NewBt NewThy H.
%Define bt_consistent : list bt_pair -> prop
%by 
%bt_consistent H := 
%  bt_consistent_iter nil nil H.




