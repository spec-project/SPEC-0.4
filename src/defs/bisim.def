%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPEC                                                                     
% Copyright (C) 2011-2017 Alwen Tiu, Nam Nguyen, Ross Horne
%
% This program is free software; you can redistribute it and/or modify     
% it under the terms of the GNU General Public License as published by     
% the Free Software Foundation; either version 2 of the License, or        
% (at your option) any later version.                                      
%
% This program is distributed in the hope that it will be useful,          
% but WITHOUT ANY WARRANTY; without even the implied warranty of           
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
% GNU General Public License for more details.                             
%
% You should have received a copy of the GNU General Public License        
% along with this code; if not, write to the Free Software Foundation,     
% Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% The main module for the bisimulation checker for the spi-calculus.
% This implementation is based on the procedures described in the following paper:

% [TD10] Alwen Tiu and Jeremy Dawson. "Automating Open Bisimulation Checking for the Spi-Calculus".
% In Proceedings of the 23rd IEEE Computer Security Foundations Symposium, pp. 307 - 321, 2010. 

% Debugging related predicates: 

% Toggle reflexivity checking on/off. It's on by default.
% This clause is changed from the SPEC interface.
Define refl_opt : prop
by
   refl_opt := false.

% Toggle progressing (on) or strong (off).
Define progressing_opt : prop
by
   progressing_opt := false.

% Toggle simulation (on) or bisimulation (off).
Define sim_opt : prop
by
   sim_opt := false.

% Toggle printing of traces on/off
Define trace_opt : prop
by 
   trace_opt := false.


#include "basic.def".
#include "bitrace.def".
#include "proc.def".

Kind refinement type.
Type conRefProc		list tm -> list sub_pair -> list thy_pair -> list constraint_pair -> action -> proc -> refinement.  % Extended with free vars, theory and constraints resulting from reduction
Type conRefAgent 	list tm -> list sub_pair -> list thy_pair -> list constraint_pair -> action -> agent -> refinement. % Extended with free vars, theory and constraints resulting from reduction
Type absRef 		(name -> refinement) -> refinement.
Type var_absRef 	(tm -> refinement) -> refinement.

Kind configuration type. 
Type conf      		list tm -> proc -> configuration. 

Define reflexive : list thy_pair -> proc -> proc -> prop 
by
reflexive Thy P Q :=
  split_thy Thy H1 H2 /\ _eqvt (conf H1 P) (conf H2 Q).

Define ref_apply_var : refinement -> refinement -> prop by
ref_apply_var (conRefProc A B C D E F) (conRefProc A B C D E F) ; 
ref_apply_var (conRefAgent A B C D E F) (conRefAgent A B C D E F) ; 
ref_apply_var (var_absRef C1) (absRef C2) :=
  nabla x, ref_apply_var (C1 (var x)) (C2 x). 

% [ref1_cont,ref2_cont] These predicates compute the refinement substitution pairs
% induced by a transition of a process in the bisimulation tuple. 

Define ref1_cont_nd : list tm -> list thy_pair -> list constraint_pair -> continuation -> refinement -> prop  % Constraints instead of bitrace. Theory required for checking channel is known.
by 
ref1_cont_nd Vs Thy Cs (contProc A Q Sub) (conRefProc Vs Sub2 Thy2 Ds A P) :=  % Ds is reduced constraints. Thy unused in this case, but used in next case.
  %cs_apply_list_pair 1 Sub Cs Cs1 /\ % Apply substitutions to L.H.S. of constraints.
  flex_subst Vs Sub2 /\
  cs_apply_list_pair_both Sub Sub2 Cs CsI /\
  id_subst Vs IdSubst /\
  _distinct(cs_solve_pair Vs nil CsI IdSubst Sol nil nil Ds) /\
  concretize Sub2 /\
  copyproc Sol Q P /\ 
  compose Vs Sub Sol Sub1 /\ 
  apply_thy_both Sub1 Sub2 Thy Thy2 /\
  _abstract (conRefProc Vs Sub2 Thy2 Ds A P) var_absRef Return_Val1 /\ 
  ref_apply_var Return_Val1 Return_Val ;
ref1_cont_nd Vs Thy Cs (contAgent (act M) Q Sub) Return_Val :=  % Ds is reduced constraints. N should be channel name on *other* side.
  apply_thy 1 Sub Thy Thy1 /\ 
  id_subst Vs IdSubst /\ 
  flex_subst Vs Sub2 /\   
  cs_apply_list_pair_both Sub Sub2 Cs CsI /\ 
  append CsI (cons (dedc_pair Thy1 (mp M N)) nil) Constraints /\  % Could be reordered. Be careful here.
  % Constraints = (cons (dedc_pair Thy1 (mp M N)) CsI) /\ % Alternative order.
  _distinct (cs_solve_pair Vs nil Constraints IdSubst Sol nil nil Ds) /\ % RH: Added distinct here to cut down refinements.
  concretize Sub2 /\ 
  %_abstract (solved_form_and_substitution Ds Sol FSub) var_abs_return_form Return_Val1 /\ 
  %solved_form_apply_var Return_Val1 Return_Val /\
  copyagent Sol Q P /\
  compose Vs Sub Sol Sub1 /\ 
  apply_thy_both Sub1 Sub2 Thy1 Thy2 /\
  _abstract (conRefAgent Vs Sub2 Thy2 Ds (act N) P) var_absRef Return_Val1 /\
  ref_apply_var Return_Val1 Return_Val ;
ref1_cont_nd Vs Thy Cs (abscont (x\ Cont x)) (absRef (x\Cts x)) := 
  nabla x, ref1_cont_nd Vs Thy Cs (Cont x) (Cts x).

% [check_consistency] Calls the procedure for checking bi-trace consistency. 

Define inductive check_consistency_nd : list tm -> list thy_pair -> list constraint_pair -> prop
by 
check_consistency_nd Vs Thy Cs := bt_cst_aux_nd Vs Thy Cs. % Checks that, for every substitution theta respecting Cs, Thy theta is a consistent theory.


Define print_bisim : list thy_pair -> list constraint_pair -> proc -> proc -> prop
by 
print_bisim Thy Cs P Q := 
   _if (trace_opt)  % Swapped default to print.
       (printstr ".")
       (
          _if sim_opt
              (printstr "[sim] Checking similarity \n")
              (printstr "[bisim] Checking bisimilarity \n")
          /\ 
          printstr "[bisim] Observer theory: " /\ pthy Thy /\ printstr "\n" /\
          printstr "[bisim] Constraints: " /\ print_cst_pair_list Cs /\ %printstr "\n" /\
          printstr "[bisim] First process: " /\ print_proc P /\ printstr "\n" /\
          printstr "[bisim] Second process: " /\ print_proc Q /\ printstr "\n" /\
          printstr "------\n"
       )
       .


Define is_solved : refinement -> prop
by
is_solved (absRef x\ (C x)) :=
   nabla x, is_solved (C (var x));
is_solved (conRefProc A B C CsL E F) :=
   cs_solved_form_pair CsL;
is_solved (conRefAgent A B C CsL E F) :=
   cs_solved_form_pair CsL.



Define bisimTau1, bisimTau2, bisimAbs1, bisimAbs2,
       bisimCon1, bisimCon2 : proc -> refinement -> prop, 
       bisimAgent : list tm -> list thy_pair -> list constraint_pair -> agent -> agent -> prop, 
       coinductive bisim : list tm -> list thy_pair -> list constraint_pair -> proc -> proc -> prop
by 

% [bisimTau1,bisimTau2] These deal with the cases involving tau transitions
% in the definition of bisimulation; see [TD10].

bisimTau1 Q (conRefProc Vs Sub2 Thy Cs A P1) :=
  copyproc Sub2 Q Q1 /\
  one Q1 A Q2 /\
  bisim Vs Thy Cs P1 Q2
; 
bisimTau1 Q (absRef x\ Cts x) :=
  nabla x, bisimTau1 Q (Cts x) ;

% [bisimAbs1,bisimAbs2] These deal with the case where the cases involving the input transitions
% in the definition of bisimulation; see [TD10] and the predicate bisim below. 
% The continuation of a transition in this case is an abstraction (agent).

bisimAbs1 Q (conRefAgent Vs Sub2 Thy Cs (act N) P1) := 
  copyproc Sub2 Q Q1 /\ 
  oneAbs Q1 (act N) Q2 /\ 
  bisimAgent Vs Thy Cs P1 Q2 ; 
bisimAbs1 Q (absRef x\ Cts x) :=
  nabla x, bisimAbs1 Q (Cts x) ; 

% [bisimCon1,bisimCon2] These deal with the case where the cases involving the output transitions
% in the definition of bisimulation. The continuation in this case is an agent. 

bisimCon1 Q (conRefAgent Vs Sub2 Thy Cs (act N) P1) :=
  copyproc Sub2 Q Q1 /\
  oneCon Q1 (act N) Q2 /\ 
  bisimAgent Vs Thy Cs P1 Q2 ; 
bisimCon1 Q (absRef x\ Cts x) :=
  nabla x, bisimCon1 Q (Cts x) ; 

 % [bisimAgent] A helper procedure to instantiate all the abstractions
% in the agents (i.e., those bound via the 'abs' and the 'new' constructs) 
% in the argument of bisimulation procedure. Variables bound by 'abs' are 
% instantiated as object-level variables (e.g., (var x) below), whereas
% variables bound by 'new' are instantiated as object-level new names. 

bisimAgent Vs Thy Cs (abs x\P x) (abs x\Q x) := 
  nabla x, exists Cs1, exists Vs1, 
   % Reduce theory here in sequent style.
   append Cs (cons (dedc_pair Thy (mp (var x) (var x))) nil) Cs1 /\ 
   append Vs (cons (var x) nil) Vs1 /\ % update variable list!
   % print_bisim Thy Cs1 (P (var x)) (Q (var x)) /\ 
   bisim Vs1 Thy Cs1 (P (var x)) (Q (var x)) ;

bisimAgent Vs Thy Cs (con M P) (con N Q) := 
         append Thy (cons (mp M N) nil) Thy1 /\
         check_consistency_nd Vs Thy1 Cs /\
         bisim Vs Thy1 Cs P Q
    ;    
bisimAgent Vs Thy Cs (con M P) (new x\ Q x) :=
  nabla x, bisimAgent Vs Thy Cs (con M P) (Q (nm x)) ; 
bisimAgent Vs Thy Cs (new x\ P x) (con N Q) := 
  nabla x, bisimAgent Vs Thy Cs (P (nm x)) (con N Q) ; 

% It's more efficient to disassociate fresh names generated for output
% actions of the first and the second processes; this way we can
% exploit the equivariant tabling property to reduce bisim size. 

bisimAgent Vs Thy Cs (new x\ P x) (new x\ Q x) := 
  nabla x, bisimAgent Vs Thy Cs (P (nm x)) (Q (nm x)) ; 

% [bisim] The main procedure for open progressing bisimulation checking.

bisim Vs Thy Cs P0 Q0 :=
  print_bisim Thy Cs P0 Q0 /\ 
  simplify P0 P /\ 
  simplify Q0 Q /\ % put up-to techniques here, so final state is printed.
  _if (refl_opt /\ reflexive Thy P Q) true (
  (forall Cont, _distinct (c_one Vs P Cont) ->
      (forall Cts,
        _distinct (ref1_cont_nd Vs Thy Cs Cont Cts)  % Vars and constraints required here. Theory only required in the case of input and output actions, but same function is used here.
             -> %((no_solution Cts) \/  % If the left constraints have no solved form, then there is nothing to check in this case.
                %print "Here at least..." /\ print Cts /\
                is_solved Cts /\ % Check reduced constraints are in solved form.
                %/\ print "Not here."/\
                (bisimTau1 Q Cts)  % Free vars, updated theory and reduced constraints are in Cts.
      )
  )
  /\
  (forall Cont, _distinct (c_oneAbs Vs P Cont) -> 
      (forall Cts, 
        _distinct (ref1_cont_nd Vs Thy Cs Cont Cts) -> (bisimAbs1 Q Cts)
      )
  )
  /\
  (forall Cont, _distinct (c_oneCon Vs P Cont) ->
      (forall Cts, 
        _distinct (ref1_cont_nd Vs Thy Cs Cont Cts) -> (bisimCon1 Q Cts)
      )
  )
  )
.
%  /\
%  (tick P -> exists N, taus Q N /\ tick N)  % RH: tick distinguish 1 from unsatifiable guards or blocked channels (should probably treat guarded 1 more carefully using refinement!).
%  /\
%_if sim_opt true
%(
%  (forall Cont, _distinct (c_one Vs Q Cont)  -> 
%      (forall Cts, 
%          _distinct (ref2_cont H Vs Cont Cts) -> (bisimTau2 H P Cts)
%      )
%  )
%  /\ 
%  (forall Cont, _distinct (c_oneAbs Vs Q Cont) -> 
%      (forall Cts, 
%        _distinct (ref2_cont H Vs Cont Cts) -> (bisimAbs2 H P Cts)
%      )
%  )
%  /\
%  (forall Cont, _distinct (c_oneCon Vs Q Cont) ->
%      (forall Cts, 
%        _distinct (ref2_cont H Vs Cont Cts) -> (bisimCon2 H P Cts)
%      )
%  )
%  /\ (tick Q -> exists N, taus P N /\ tick N)


Type a name.
Type b name.
Type c name.
Type d name.
Type ed name.
Type k name.
Type l name.
Type n name.
Type r name.
Type r1 name.
Type r2 name.
Type s name.
Type u name.
Type v name.
Type x name.
Type y name.
Type z name.

Define universal : list tm -> list constraint_pair -> prop
by
universal nil nil;
universal (cons M Vs) (cons (dedc_pair nil (mp M M)) Cs) :=
   universal Vs Cs.

Define top : list tm -> proc -> proc -> prop
by
top Vs P Q :=
   universal Vs Cs /\
   bisim Vs nil Cs P Q.

Define test : nat -> prop by
test 0 :=
  top nil (taup zero)
          (plus (taup zero)
          (taup zero));
test 1 :=
  top (cons (var x) nil)
      (outp (var x) (var x) zero)
      (plus (outp (var x) (var x) zero) (outp (var x) (var x) zero));
test 2 :=
  top (cons (var x) nil)
      (inp (var x) y\ zero)
      (plus (inp (var x) y\ zero) (inp (var x) y\ zero));

%Example: bisim(
%           nu(n,k).?a<hash(n)>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(hash(n),hash(n)),k)]tau , 
%           nu(n,k).?a<hash(hash(n))>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(hash(hash(n)),hash(hash(n))),k)]tau );
test 3 :=
  top (cons (var a) nil) 
      (nu n\ (nu k\ (outp (var a) (hs n) (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign (blind (hs n) (hs n)) k) (taup zero))))))))
      (nu n\ (nu k\ (outp (var a) (hs (hs n)) (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign (blind (hs (hs n)) (hs (hs n))) k) (taup zero))))))));

%Example: bisim(
%           nu(n,k).?a<n>.?a(x).?a<sign(blind(x,n),k)>.?a(y).[y = sign(blind(n,n),k)]tau ,
%           nu(n,k).?a<n>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(n,k)]tau );
test 4 :=
  top (cons (var a) nil) 
      (nu n\ (nu k\ (outp (var a) n (inp (var a) x\ (outp (var a) (sign (blind x n) k) (inp (var a) y\ (match y (sign (blind n n) k) (taup zero))))))))
      (nu n\ (nu k\ (outp (var a) n (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign n k) (taup zero))))))));

%Example: bisim(
%           nu(n,k).?a<n>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(n,k)]tau ,
%           nu(n,k).?a<n>.?a(x).?a<sign(blind(x,n),k)>.?a(y).[y = sign(blind(n,n),k)]tau );
test 5 :=
  top (cons (var a) nil)       
      (nu n\ (nu k\ (outp (var a) n (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign n k) (taup zero))))))))
      (nu n\ (nu k\ (outp (var a) n (inp (var a) x\ (outp (var a) (sign (blind x n) k) (inp (var a) y\ (match y (sign (blind n n) k) (taup zero))))))));

%Example: bisim( nu(n,k).?a<hash(n)>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(hash(n),hash(n)),k)]tau , nu(n,k).?a<hash(hash(n))>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(hash(hash(n)),hash(hash(n))),k)]tau );
test 6 :=
  top (cons (var a) nil) 
      (nu n\ (nu k\ (outp (var a) (hs n) (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign (blind (hs n) (hs n)) k) (taup zero))))))))
      (nu n\ (nu k\ (outp (var a) (hs (hs n)) (inp (var a) x\ (outp (var a) (sign x k) (inp (var a) y\ (match y (sign (blind (hs (hs n)) (hs (hs n))) k) (taup zero)))))))).


%bisim( nu(n,k).?a<n>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(n,n),k)]tau , nu(n,k).?a<n>.?a(x).?a<sign(x,k)>.?a(y).[y = sign(blind(n,n),k)]tau );
